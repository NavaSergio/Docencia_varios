{
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {},
      "source": [
        "---\n",
        "title: \"Diseño de bases de datos y recolección de información\"\n",
        "subtitle: \"Seminario de Proyecto I (MCDI) — Unidad 4\"\n",
        "author: \"Sergio Martín Nava Muñoz\"\n",
        "date: \"`r format(Sys.Date(), '%d de %B de %Y')`\"\n",
        "format:\n",
        "  revealjs:\n",
        "    theme: [default]\n",
        "    slide-number: true\n",
        "    toc: true\n",
        "    toc-depth: 2\n",
        "    code-overflow: wrap\n",
        "    incremental: true\n",
        "    footer: \"MCDI | Seminario de Proyecto I | Unidad 4\"\n",
        "execute:\n",
        "  echo: false\n",
        "  warning: false\n",
        "  message: false\n",
        "---\n",
        "\n",
        "\n",
        "## Propósito de la sesión\n",
        "\n",
        "- Entender los **principios de diseño de bases de datos (BD)** para proyectos de Ciencia de Datos.  \n",
        "- Delinear un **plan de recolección de información** con criterios de calidad, ética y trazabilidad.  \n",
        "- Preparar los insumos para la evidencia **4A. Creación de la base de datos** y la **presentación final** del protocolo.\n",
        "\n",
        "::: callout-tip\n",
        "**Productos esperados**  \n",
        "1) Esquema lógico de BD (tablas/campos/llaves).  \n",
        "2) Diccionario de datos.  \n",
        "3) Plan de recolección y control de calidad.  \n",
        "4) Muestra mínima de la BD con metadatos.\n",
        ":::\n",
        "\n",
        "## Ruta lógica del diseño de datos\n",
        "\n",
        "1. **Problema / variables** → ¿Qué fenómeno quiero medir? (VD, VI, covariables)  \n",
        "2. **Modelo conceptual** → Entidades, relaciones, cardinalidades.  \n",
        "3. **Esquema lógico** → Tablas, claves primarias/foráneas, tipos de datos.  \n",
        "4. **Normalización y performance** → 1FN–3FN vs. desnormalización táctica.  \n",
        "5. **Gobernanza y metadatos** → diccionario, convenciones, control de versiones.  \n",
        "6. **Recolección** → fuentes, instrumentos, muestreo, formato, ética.  \n",
        "7. **Calidad** → validaciones, reglas de negocio, auditoría, reproducibilidad.\n",
        "\n",
        "---\n",
        "\n",
        "## De variables a entidades {.smaller}\n",
        "\n",
        "- **Variable dependiente (VD)**: resultado a explicar/predcir.  \n",
        "- **Variables independientes (VI)**: insumos/explicativas.  \n",
        "- **Derivadas / indicadores**: transformaciones útiles para el análisis.\n",
        "\n",
        "**Ejemplo** (fraude transaccional):  \n",
        "- VD: `is_fraud` (0/1).  \n",
        "- VI nucleares: `amount`, `channel`, `merchant_id`, `customer_id`, `timestamp`.  \n",
        "- Derivadas: `hour`, `dayofweek`, `rolling_amount_1h`, `distance_home_merchant`.\n",
        "\n",
        "::: columns\n",
        "::: column\n",
        "**Entidades**  \n",
        "- `customers (customer_id, ...)`  \n",
        "- `merchants (merchant_id, ...)`  \n",
        "- `transactions (tx_id, customer_id, merchant_id, amount, ts, ...)`\n",
        ":::\n",
        "::: column\n",
        "**Relaciones**  \n",
        "- 1:N `customers` → `transactions`  \n",
        "- 1:N `merchants` → `transactions`  \n",
        "- Opcional: N:M con tablas puente si aplica\n",
        ":::\n",
        ":::\n",
        "\n",
        "---\n",
        "\n",
        "## Modelo conceptual (borrador ER)\n",
        "\n",
        "\n",
        "```{mermaid}\n",
        "erDiagram\n",
        "  CUSTOMERS ||--o{ TRANSACTIONS : makes\n",
        "  MERCHANTS ||--o{ TRANSACTIONS : receives\n",
        "  CUSTOMERS {\n",
        "    string customer_id PK\n",
        "    string segment\n",
        "    date   signup_date\n",
        "  }\n",
        "  MERCHANTS {\n",
        "    string merchant_id PK\n",
        "    string category\n",
        "    string city\n",
        "  }\n",
        "  TRANSACTIONS {\n",
        "    string tx_id PK\n",
        "    string customer_id FK\n",
        "    string merchant_id FK\n",
        "    datetime ts\n",
        "    numeric amount\n",
        "    string channel\n",
        "    bool   is_fraud\n",
        "  }\n",
        "```\n",
        "\n",
        "> Diagrama de primer corte. Refínalo con tus variables reales.\n",
        "\n",
        "---\n",
        "\n",
        "## Esquema lógico y claves\n",
        "\n",
        "- **Claves primarias (PK)**: identifican unívocamente filas.  \n",
        "- **Claves foráneas (FK)**: preservan integridad referencial.  \n",
        "- **Tipos de datos**: escoger por uso y performance (INTEGER, NUMERIC, TEXT, DATE/TIMESTAMP, BOOLEAN).  \n",
        "- **Índices**: en columnas de `JOIN`, filtros frecuentes y fechas.\n",
        "\n",
        "**Reglas rápidas**  \n",
        "- PK **surrogada** (`serial`/`uuid`) cuando no existe una natural estable.  \n",
        "- Evitar usar texto libre como FK.  \n",
        "- Mantener **inmutables** las PK.\n",
        "\n",
        "---\n",
        "\n",
        "## Normalización práctica\n",
        "\n",
        "- **1FN**: sin repetición de grupos; tipos atómicos.  \n",
        "- **2FN**: no dependencias parciales en PK compuestas.  \n",
        "- **3FN**: no dependencias transitivas.  \n",
        "\n",
        "**Cuándo desnormalizar**  \n",
        "- Lecturas analíticas muy frecuentes (p. ej., agregar columnas derivadas para *features*).  \n",
        "- Tablas anchas para *feature store* (con versión y procedencia).\n",
        "\n",
        "---\n",
        "\n",
        "## Diccionario de datos (plantilla) {.smaller}\n",
        "\n",
        "| Tabla | Variable | Tipo | Dominios/Reglas | Nulos | Descripción | Fuente | Transformación |\n",
        "|---|---|---|---|---:|---|---|---|\n",
        "| transactions | tx_id | TEXT | UUID v4 | 0 | Identificador de transacción | sistema | — |\n",
        "| transactions | amount | NUMERIC(12,2) | ≥ 0 | 0 | Monto en MXN | POS | redondeo 2 dec |\n",
        "| transactions | ts | TIMESTAMP | UTC | 0 | Fecha/hora de operación | POS | tz-normalizada |\n",
        "| transactions | is_fraud | BOOLEAN | {0,1} | 0 | Etiqueta objetivo | analista | regla v1.2 |\n",
        "\n",
        "> Mantén este archivo versionado (`data_dictionary.csv`) y sincronizado con el esquema.\n",
        "\n",
        "---\n",
        "\n",
        "## Recolección: fuentes e instrumentos\n",
        "\n",
        "- **Fuentes primarias**: encuestas, sensores, logs, formularios.  \n",
        "- **Fuentes secundarias**: bases gubernamentales, APIs, repos institucionales.  \n",
        "- **Instrumentos**: formularios (con validación en captura), *ETL* programados, *web scraping* con cuidado ético-legal.\n",
        "\n",
        "**Muestreo y cobertura**  \n",
        "- Define unidad de análisis, marco muestral, tamaño y sesgos potenciales.  \n",
        "- Estratificación cuando existan subpoblaciones clave.\n",
        "\n",
        "---\n",
        "\n",
        "## Calidad de datos (antes/durante/después)\n",
        "\n",
        "**Prevención** (en captura)  \n",
        "- Tipos y rangos en el formulario/DBMS.  \n",
        "- Catálogos cerrados y validación cruzada.\n",
        "\n",
        "**Detección y corrección** (ETL)  \n",
        "- Reglas: unicidad de PK, dominios, consistencia temporal, *outliers* plausibles.  \n",
        "- Bitácora de errores, *logs* de cambios, *unit tests* de datos.\n",
        "\n",
        "**Trazabilidad**  \n",
        "- Metadatos `source`, `ingestion_ts`, `version`, `checksum`.  \n",
        "- Carpeta `raw/` (inmutable) → `staging/` → `curated/` (*medallion*).\n",
        "\n",
        "---\n",
        "\n",
        "## Ética, privacidad y datos sintéticos\n",
        "\n",
        "- Minimiza la **recolección de datos sensibles** si no son imprescindibles.  \n",
        "- Aplica anonimización/pseudonimización y controles de acceso.  \n",
        "- Cuando compartir datos sea necesario, evalúa **datos sintéticos** para balancear **utilidad vs. riesgo de revelación** (por ejemplo, con técnicas basadas en árboles de decisión, *random forest* o redes neuronales).  \n",
        "- Mide utilidad (p. ej., divergencias, solapamiento de ICs) y **riesgo de re-identificación** con escenarios de intrusor.\n",
        "\n",
        "> Nota: en comparativas publicadas, los **árboles de decisión** suelen ser eficaces y eficientes para sintetizar datos con buen equilibrio entre utilidad y riesgo; las redes neuronales pueden reducir riesgo a costa de mayor tiempo de cómputo. Sustenta con métricas y reporte metodológico.\n",
        "\n",
        "---\n",
        "\n",
        "## Arquitectura mínima de trabajo (proyecto)\n",
        "\n",
        "```\n",
        "/data\n",
        "  /raw           # fuentes originales solo lectura\n",
        "  /staging       # limpieza/estandarización\n",
        "  /curated       # listo para análisis/modelado\n",
        "  data_dictionary.csv\n",
        "/db\n",
        "  schema.sql     # DDL y constraints\n",
        "/notebooks\n",
        "  01_exploracion.ipynb\n",
        "  02_validaciones.ipynb\n",
        "/src\n",
        "  etl_ingesta.py\n",
        "  reglas_calidad.yml\n",
        "README.md\n",
        "```\n",
        "\n",
        "---\n",
        "\n",
        "## Mini-guía para DBMS\n",
        "\n",
        "- **SQLite**: prototipado local, *lightweight*, perfecto para empezar.  \n",
        "- **PostgreSQL**: robusto, extensiones GIS/JSONB, ideal producción.  \n",
        "- **DuckDB**: analítica en archivos Parquet/CSV, rápido en local.  \n",
        "- **NoSQL** (cuando aplica): eventos/clave-valor, documentos o grafos.\n",
        "\n",
        "> Elige según concurrencia, volumen, tipo de consultas y facilidad de despliegue.\n",
        "\n",
        "---\n",
        "\n",
        "## Checklist de entrega (Evidencia 4A)\n",
        "\n",
        "- [ ] Archivo de base (`.db`, `.parquet`, `.csv` o similar) y **tamaño**.  \n",
        "- [ ] DBMS utilizado (SQLite/PostgreSQL/DuckDB/otro).  \n",
        "- [ ] **Variables** incluidas y número de observaciones.  \n",
        "- [ ] **Diccionario** actualizado.  \n",
        "- [ ] **Video** (≤ 3 min) mostrando archivo, peso, DBMS y contenido.  \n",
        "- [ ] PDF con **enlace al video** y captura de pantalla.\n",
        "\n",
        "---\n",
        "\n",
        "## Actividad guiada (15–20 min)\n",
        "\n",
        "1) Dibuja el **ER** de tus datos (3–5 entidades).  \n",
        "2) Define **PK/FK** y tipa 10 variables clave.  \n",
        "3) Escribe 6 reglas de **calidad** (3 prevención, 3 detección).  \n",
        "4) Redacta **plan de recolección** (fuentes, instrumento, muestreo, ética).\n",
        "\n",
        "> Entregable: subir a la carpeta del curso tu ER (imagen), `schema.sql` y `data_dictionary.csv`.\n",
        "\n",
        "---\n",
        "\n",
        "## Apéndice — Esqueleto `schema.sql`\n",
        "\n",
        "\n",
        "```{sql}\n",
        "-- Tabla principal de transacciones\n",
        "CREATE TABLE transactions (\n",
        "  tx_id TEXT PRIMARY KEY,\n",
        "  customer_id TEXT NOT NULL,\n",
        "  merchant_id TEXT NOT NULL,\n",
        "  ts TIMESTAMP NOT NULL,\n",
        "  amount NUMERIC(12,2) CHECK (amount >= 0),\n",
        "  channel TEXT CHECK (channel IN ('pos','web','app','ivr')),\n",
        "  is_fraud BOOLEAN NOT NULL DEFAULT 0,\n",
        "  -- metadatos\n",
        "  source TEXT,\n",
        "  ingestion_ts TIMESTAMP DEFAULT CURRENT_TIMESTAMP\n",
        ");\n",
        "\n",
        "CREATE INDEX idx_transactions_ts ON transactions(ts);\n",
        "CREATE INDEX idx_transactions_customer ON transactions(customer_id);\n",
        "\n",
        "-- Catálogos\n",
        "CREATE TABLE customers (\n",
        "  customer_id TEXT PRIMARY KEY,\n",
        "  segment TEXT,\n",
        "  signup_date DATE\n",
        ");\n",
        "\n",
        "CREATE TABLE merchants (\n",
        "  merchant_id TEXT PRIMARY KEY,\n",
        "  category TEXT,\n",
        "  city TEXT\n",
        ");\n",
        "\n",
        "ALTER TABLE transactions\n",
        "  ADD FOREIGN KEY (customer_id) REFERENCES customers(customer_id),\n",
        "  ADD FOREIGN KEY (merchant_id) REFERENCES merchants(merchant_id);\n",
        "```\n",
        "\n",
        "\n",
        "---\n",
        "\n",
        "## Referencias mínimas\n",
        "\n",
        "- Dandekar, A., Zen, R. A. M., & Bressan, S. (2018). *A Comparative Study of Synthetic Dataset Generation Techniques*. DEXA 2018, 387–395.  \n",
        "- Ascolano Ruiz, F., Cazorla Quevedo, M. A., Alfonso, M. I., Colomina Pardo, O., & Lozano Ortega, M. A. (2003). *Inteligencia Artificial: modelos, técnicas y áreas de aplicación*. Paraninfo.  \n",
        "- Baesens, B. (2014). *Analytics in a Big Data World*. Wiley.  \n",
        "- Lateh, M. A., et al. (2017). Handling a small dataset problem in prediction model by employ artificial data generation approach. *J. Phys.: Conf. Ser.*, 892(1), 012016.\n",
        "\n",
        "---\n",
        "\n",
        "## Cierre\n",
        "\n",
        "- La calidad del **diseño de datos** determina la calidad del **análisis**.  \n",
        "- Documenta y automatiza: **diccionario + DDL + ETL + pruebas**.  \n",
        "- Evalúa la opción de **datos sintéticos** si debes compartir o abrir datos.  \n",
        "- Asegura **ética, privacidad y reproducibilidad** desde el día 1."
      ],
      "id": "c955cab8"
    }
  ],
  "metadata": {
    "kernelspec": {
      "display_name": "Python 3",
      "language": "python",
      "name": "python3"
    }
  },
  "nbformat": 4,
  "nbformat_minor": 5
}